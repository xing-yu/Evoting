request example

b'GET /nosure?username=abcd HTTP/1.1
Host: localhost:9000
Cookie: username-localhost-8888="2|1:0|10:1536180270|23:username-localhost-8888|44:NjMxNmFiZDhiNjA3NGIxNjk0ZWQxMGViOWFiNzYyZWM=|4a728fd2024f6f17f70388bbca0afc22f2332831b1d93ce6ac156907f7ad763e"; _xsrf=2|c56960c0|02bf58767e79cf1acf6ef66e5476cbc7|1534382324
Connection: keep-alive
Upgrade-Insecure-Requests: 1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.2 Safari/605.1.15
Referer: http://localhost:9000/?username=xingyu
Accept-Language: en-us
Accept-Encoding: gzip, deflate

'

#------------------------------------ design of metadata ----------------------------

1. metadata: Manager.dict()

2. peer_info: {str: (int, str)}

	{ip: (port, status)}

	ip: peer's ip in string format

	port: peer's port number 

	status: "ONLINE", "READY"

3. peer_votes: {str: int}

	{ip: vote}

	ip: peer's ip

	vote: integer of the masked vote from that peer

4. peer_shares: {str: int}

	{ip: share}

	ip: peer's ip

	share: integer of the share from that peer

5. shares: [int]

	list of integers, derived from breaking down local vote using (n,n) secret sharing.

	list length is n - 1

	the last share is private

6. local_vote: int

	an integer indicates which candidate is chosen by the node, 0 based index

7. masked_vote: int

	vote masked with peers' shares

8. Zm: int
	
	all shares s_i should satisfy that s >= 0 and s <= Zm

	the value should be predefined based on number of votes and candidates

9. node_id: int

	integer returned from peer_0

	represent the id of local node

	used in turn vote into binary vector and then the vote value

10. tally_result: [int]

	a binary vector derived from the final tallied result

11. vector_len: int

	an integer represents the lenght of the voting vector

	vector_len = candidate_num * voter_num

12. num_active_peer: int

	number of active peers at tally

	peer 0 broadcast it at tally

13. convert_vote: int

	based on local vote, turn it into a binary vector, then convert into an int vote
